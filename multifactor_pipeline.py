{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "60ddf9e4-83f5-46c8-8cbd-25b5499a4f31",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading prices...\n",
      "Building portfolios...\n",
      "\n",
      "Performance (monthly basis):\n",
      "======================================================================\n",
      "                  Total Return Annualized Return Volatility Sharpe  \\\n",
      "Strategy                                                             \n",
      "Momentum (Net)          633.3%             43.7%      26.2%   1.59   \n",
      "Low-Vol (Net)           124.8%             14.2%      15.9%   0.77   \n",
      "Combo 50/50 (Net)       185.2%             21.0%      17.8%   1.07   \n",
      "SPY                     164.3%             15.9%      16.9%   0.82   \n",
      "\n",
      "                  Max Drawdown Beta vs SPY Tracking Error Information Ratio  \n",
      "Strategy                                                                     \n",
      "Momentum (Net)          -19.3%        1.13          17.4%              1.31  \n",
      "Low-Vol (Net)           -15.1%        0.67          12.5%             -0.09  \n",
      "Combo 50/50 (Net)       -18.0%        0.77          12.4%              0.28  \n",
      "SPY                     -23.9%         NaN            NaN               NaN  \n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAJOCAYAAABm7rQwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3hUxR7G8XfTeyEFAgQSeu8gvQsiiBVRUWmigoiKehUrRUVRsYAiKk1RwYoNQbogVXqvCQECJBBSSEjdc/+IWYgJkMAmm02+n+fJc3fnnJ3z290xmvfOzDEZhmEIAAAAAAAAKEYOti4AAAAAAAAAZQ+hFAAAAAAAAIodoRQAAAAAAACKHaEUAAAAAAAAih2hFAAAAAAAAIodoRQAAAAAAACKHaEUAAAAAAAAih2hFAAAAAAAAIodoRQAAAAAAACKHaEUAACSduzYocGDBys8PFxubm7y8vJSs2bNNGnSJMXFxdm6vCsaO3asTCbTNb124cKFGjt2bL7HwsLCNGjQoGsv7Bp17txZJpPJ8uPu7q7GjRvr/fffl9lstuq1tm7dqk6dOsnX11cmk0nvv/++Vfsvi+Lj4xUYGKh58+ZZ2nLGqIODg44cOZLnNcnJyfLx8ZHJZCryMXelMW8ymTRy5Mir9jF79myZTCZFRkZat7hLREZGWv4ZuPSzzJHzmZ45c6bQfa9du1Zjx45VfHx8nmMdO3bUk08+eQ0VAwBQeIRSAIAy77PPPlPz5s21adMmPfvss1q0aJF++ukn9evXT5988omGDh1q6xKLzMKFCzVu3Lh8j/300096+eWXi7mibNWqVdO6deu0bt06zZ8/X5UqVdJTTz2lMWPGWPU6Q4YM0cmTJzVv3jytW7dO99xzj1X7L4vGjRunihUrqn///nmOeXl5adasWXnav/vuO2VkZMjZ2bnI67vSmC+pXnzxRWVkZFitv7Vr12rcuHH5hlITJkzQxx9/rP3791vtegAAXA6hFACgTFu3bp2GDx+u7t27a/PmzRoxYoQ6d+6sG2+8UWPGjNG+ffs0ePBgW5dpE02bNlX16tVtcm13d3e1bt1arVu3Vt++ffXzzz+rWrVqmjp16nX/cZ6VlaW0tDRJ0q5du9S9e3f16tVLrVu3VoUKFa6r74yMDGVmZl5XH/YsLi5O06dP12OPPZbv7L3+/ftrzpw5eWa8zZgxQ7fffrtcXFyKq1S70atXLx05ckSffPJJsVyvU6dOql27tt59991iuR4AoGwjlAIAlGlvvPGGTCaTPv30U7m6uuY57uLior59+1qem0ymfJf+/HepW87ynuXLl2vYsGEKCAiQj4+PHnzwQSUnJ+vUqVO6++675efnp5CQED3zzDO5wpaVK1fKZDJp5cqVua6Ts6Rn9uzZV3xf8+fPV48ePRQSEiJ3d3fVrVtXzz//vJKTky3nDBo0SB999JHlfeX85CxJuvQ9xcbGysXFJd+ZU/v27ZPJZNKHH35oaTt16pQeeeQRVa5cWS4uLgoPD9e4ceOuObBxdnZW8+bNlZKSotjY2AJfI+fzmjRpkl577TWFh4fL1dVVs2bNkslkUmZmpqZNm2Z57zl27dqlW2+9Vf7+/nJzc1OTJk00Z86cXDXlfEdffvmlnn76aVWqVEmurq46dOiQBg0aJC8vL+3bt089e/aUp6enQkJC9Oabb0qS1q9fr/bt28vT01O1atXK03dsbKxGjBihevXqycvLS8HBweratatWr16d67yc9/fOO+9o8uTJCg8Pl5eXl9q0aaP169fn+Rw3bNigW265RQEBAXJzc1P16tXzLNU6ePCg7rvvPgUHB8vV1VV169a1jJOrmT17tjIzM/OdJSVlz0w7duyYlixZYmk7cOCA1qxZoyFDhuT7mqioKN1///256nn33XdzBVsF/RyuNuZzfPnll6pbt648PDzUuHFj/fbbb1d83xMmTJCTk5OOHTuW73sOCAhQamrqFfu4nK5du6pnz56aMGGCkpKSrnr+0qVL1a1bN/n4+MjDw0Pt2rXTsmXLLMfHjh2rZ599VpIUHh5u+Qwu/V3zwAMP6Ouvvy7Q9QAAuB6EUgCAMisrK0vLly9X8+bNFRoaWiTXeOihh+Tr66t58+bppZde0tdff61hw4apd+/eaty4sb7//nsNHDhQ7777rqZMmWK16x48eFA333yzZsyYoUWLFunJJ5/Ut99+q1tuucVyzssvv6y77rpLkixL5datW6eQkJA8/QUFBalPnz75znKZNWuWXFxcNGDAAEnZYVGrVq20ePFivfLKK/rjjz80dOhQTZw4UcOGDbvm93T48GE5OTnJ39+/0Nf48MMPtXz5cr3zzjv6448/1Lx5c61bt06SdNddd1neuyTt379fbdu21e7du/Xhhx/qxx9/VL169TRo0CBNmjQpT99jxoxRVFSUPvnkE/36668KDg6WlD1r6o477lDv3r31888/q1evXhozZoxeeOEFDRw4UEOGDNFPP/2k2rVra9CgQdq8ebOlz5x9zF599VX9/vvvmjVrlqpVq6bOnTvnCSol6aOPPtKSJUv0/vvv66uvvlJycrJuvvlmJSQkWM5ZvHixOnTooKioKE2ePFl//PGHXnrpJZ0+fdpyzp49e9SyZUvt2rVL7777rn777Tf17t1bo0aNKtCSt99//11NmzaVn59fvsdr1qypDh06aObMmZa2mTNnKiwsTN26dctzfmxsrNq2bas///xTEyZM0C+//KLu3bvrmWeeyXfvp6t9DgUZ87///rumTp2q8ePH64cfflC5cuV0++2357sXVo5HHnlETk5Omj59eq72uLg4zZs3T0OHDpWbm9vlP7ireOutt3TmzBm9/fbbVzxv7ty56tGjh3x8fDRnzhx9++23KleunHr27GkJph566CE9/vjjkqQff/zR8hk0a9bM0k/nzp2VnJyc71gDAMCqDAAAyqhTp04Zkox77rmnwK+RZLz66qt52qtWrWoMHDjQ8nzWrFmGJOPxxx/Pdd5tt91mSDImT56cq71JkyZGs2bNLM9XrFhhSDJWrFiR67yIiAhDkjFr1ixL26uvvmpc6V/pZrPZyMjIMFatWmVIMrZv32459thjj132tf99T7/88oshyfjzzz8tbZmZmUbFihWNO++809L2yCOPGF5eXsbRo0dz9ffOO+8Ykozdu3dftlbDMIxOnToZ9evXNzIyMoyMjAwjOjraeP755w1JRr9+/Qp1jZzPq3r16kZ6enqea0kyHnvssVxt99xzj+Hq6mpERUXlau/Vq5fh4eFhxMfHG4Zx8Tvq2LFjnn4HDhxoSDJ++OEHS1tGRoYRFBRkSDK2bNliaT979qzh6OhojB49+rKfSWZmppGRkWF069bNuP322y3tOe+vYcOGRmZmpqV948aNhiTjm2++sbRVr17dqF69unHhwoXLXqdnz55G5cqVjYSEhFztI0eONNzc3Iy4uLjLvtYwDMPDw8N49NFH87TnjNHY2Fhj1qxZhqurq3H27FkjMzPTCAkJMcaOHWsYhmF4enrmGnM53/uGDRty9Td8+HDDZDIZ+/fvL/TncKUxL8koX768kZiYaGk7deqU4eDgYEycONHSlvPPd0REhKVt4MCBRnBwsJGWlmZpe+uttwwHB4dc5xVUznt6++23DcMwjAEDBhienp7GyZMnDcPI/ZkahmEkJycb5cqVM2655ZZc/WRlZRmNGzc2WrVqZWl7++2389R/qfT0dMNkMhnPPfdcoesGAKAwmCkFAEAR6tOnT67ndevWlST17t07T/vRo0etdt0jR47ovvvuU4UKFeTo6ChnZ2d16tRJkrR3795r6rNXr16qUKFCro2qFy9erOjo6FxLr3777Td16dJFFStWVGZmpuWnV69ekqRVq1Zd9Vq7d++Ws7OznJ2dVbFiRb377rsaMGCAPvvss2u6Rt++fQu8ifby5cvVrVu3PLPnBg0apJSUFMuMqhx33nlnvv2YTCbdfPPNludOTk6qUaOGQkJC1LRpU0t7uXLlFBwcnOf7/+STT9SsWTO5ubnJyclJzs7OWrZsWb7fX+/eveXo6Gh53qhRI0my9HngwAEdPnz4ijN2UlNTtWzZMt1+++3y8PDI9bnefPPNSk1NzXdJYI74+HilpKRYZopdTr9+/eTi4qKvvvpKCxcu1KlTpy57x73ly5erXr16atWqVa72QYMGyTAMLV++vFCfQ0F06dJF3t7elufly5fP9/v5ryeeeEIxMTH67rvvJElms1nTpk1T7969FRYWVuDrX85rr72mjIyMy85YW7t2reLi4jRw4MBc353ZbNZNN92kTZs25Vq+eyXOzs7y8/PTiRMnrrtuAACuxMnWBQAAYCuBgYHy8PBQREREkV2jXLlyuZ7nbOScX/u17jnzX+fPn1eHDh3k5uam1157TbVq1ZKHh4eOHTumO+64QxcuXLimfp2cnPTAAw9oypQpio+Pl5+fn2bPnq2QkBD17NnTct7p06f166+/XjYEKsgt7KtXr6558+bJZDLJzc1N4eHh8vDwuOZr5Lck8XLOnj2b7/kVK1a0HC9I3x4eHnkCIBcXlzzffU77pd//5MmT9fTTT+vRRx/VhAkTFBgYKEdHR7388sv5hlIBAQG5nufsj5bzXefsw1W5cuV8a815X5mZmZoyZcpll5Je6bvLudbVlql5enqqf//+mjlzpqpWraru3buratWql60pv0Dnct/F1T6HgvhvHzn9XK2Ppk2bqkOHDvroo480YMAA/fbbb4qMjMyzpO9ahYWFacSIEZo6dapGjx6d53jOMsyc5Yn5iYuLk6enZ4Gu5+bmds2/KwAAKChCKQBAmeXo6Khu3brpjz/+0PHjx6/4B3sOV1dXy53bLvXfP46vV84f9v+9VkECneXLlys6OlorV660zI6SlO/t3wtr8ODBevvttzVv3jz1799fv/zyi5588slcs1MCAwPVqFEjvf766/n2kRMoXImbm5tatGhx2eOFvUZ+d4K7nICAAJ08eTJPe3R0tOXa19p3Qc2dO1edO3fWtGnTcrVf68bTQUFBkqTjx49f9hx/f385OjrqgQce0GOPPZbvOeHh4Zd9fU6Yk7Mf1pUMGTJEn3/+uXbs2KGvvvrqin0W5ruwtVGjRqlfv37asmWLpk6dqlq1aunGG2+0Wv8vvfSSZs6cqRdeeEH169fPdSzns5gyZYpat26d7+vLly9f4GudO3euxH2+AIDSh1AKAFCmjRkzRgsXLtSwYcP0888/57klfUZGhhYtWmTZIDwsLEw7duzIdc7y5ct1/vx5q9aVMztkx44duWYh/fLLL1d9bU5I8t+7CeY3Y+PSmSTu7u5X7btu3bq64YYbNGvWLGVlZSktLU2DBw/OdU6fPn20cOFCVa9eXf7+/lft81oU5TW6deumn376SdHR0bnCrS+++EIeHh6X/YPfmkwmU57vb8eOHVq3bt01bcpfq1YtVa9eXTNnztTo0aPzvdOkh4eHunTpoq1bt6pRo0Z5/lm4GhcXF1WrVk2HDx++6rlt2rTRkCFDlJCQoNtvv/2y53Xr1k0TJ07Uli1bcm3E/cUXX8hkMqlLly6FqlEq/JgvjNtvv11VqlTR008/rVWrVum9996zamgZEBCg5557Ti+++GKepXjt2rWTn5+f9uzZk+8m8Je62gyy6Ohopaamql69etYpHACAyyCUAgCUaW3atNG0adM0YsQINW/eXMOHD1f9+vWVkZGhrVu36tNPP1WDBg0sodQDDzygl19+Wa+88oo6deqkPXv2aOrUqfL19bVqXRUqVFD37t01ceJE+fv7q2rVqlq2bJl+/PHHq762bdu28vf316OPPqpXX31Vzs7O+uqrr7R9+/Y85zZs2FBS9t29evXqJUdHx6sGEkOGDNEjjzyi6OhotW3bVrVr1851fPz48VqyZInatm2rUaNGqXbt2kpNTVVkZKQWLlyoTz75pECz0q6kKK/x6quvWvaseuWVV1SuXDl99dVX+v333zVp0iSrf9f56dOnjyZMmKBXX31VnTp10v79+zV+/HiFh4crMzPzmvr86KOPdMstt6h169Z66qmnVKVKFUVFRWnx4sWW2UoffPCB2rdvrw4dOmj48OEKCwtTUlKSDh06pF9//TXPHk7/1blzZ/3xxx8FqmfGjBlXPeepp57SF198od69e2v8+PGqWrWqfv/9d3388ccaPny4atWqVaBrXepaxnxBOTo66rHHHtNzzz0nT0/PfPfKmj17tgYPHqxZs2Zddi+tK3nyySf10Ucf5fmcvby8NGXKFA0cOFBxcXG66667FBwcrNjYWG3fvl2xsbGWmXc5n8EHH3yggQMHytnZWbVr17bspZWzd9i1hH4AABQGG50DAMq8YcOG6Z9//lHz5s311ltvqUePHrrtttv0zTff6L777tOnn35qOffZZ5/Vs88+q9mzZ+uWW27RDz/8oG+//VZ+fn5Wr+vLL79Ut27d9Nxzz6lfv346ceKEvvnmm6u+LiAgQL///rs8PDx0//33a8iQIfLy8tL8+fPznHvffffpoYce0scff6w2bdqoZcuWlqVRl3PPPffI3d1dx48fzzNLSsreY+mff/5Rjx499Pbbb+umm27SAw88oJkzZ6pJkyZWmdlUlNeoXbu21q5dq9q1a+uxxx7Tbbfdpl27dmnWrFl69tlnr7v2gnjxxRf19NNPa8aMGerdu7c+//xzffLJJ2rfvv0199mzZ0/99ddfCgkJ0ahRo3TTTTdp/PjxuZZ01atXT1u2bFGDBg300ksvqUePHho6dKi+//57devW7arXGDBggE6ePKlNmzZdc52XCgoK0tq1a9W1a1eNGTNGffr00eLFizVp0qTL7nt1Ndcy5gujf//+krID7PwCzJxZlYXZ5+xSHh4eGjt2bL7H7r//fq1YsULnz5/XI488ou7du+uJJ57Qli1bcn1/nTt31pgxY/Trr7+qffv2atmypTZv3mw5vmDBAjVs2NASXgEAUFRMhmEYti4CAAAApUOjRo3Url27PPthlRVTpkzRqFGjtGvXrjz7PknS3XffrYiICKsFd9aWmJioihUr6r333tOwYcNsXQ4AoJQjlAIAAIDVLFq0SLfffrsOHjx43cs07cnWrVsVERGhRx55RO3atdOCBQvynGMYhsqXL6+5c+eqR48exV9kAYwbN07z58/X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qVatWqpfv75Gjx6t9evXW86LiorSrbfeKi8vL/n4+Ojuu+/W6dMXp/uNHTtWTZo00cyZM1WlShV5eXlp+PDhysrK0qRJk1ShQgUFBwfr9ddfz1PDyZMn1atXL7m7uys8PFzfffddruM7d+5U165d5e7uroCAAD388MM6f/78Vd+bn5+fKlSoYPlxd794d4OvvvpKqampmj17tho0aKA77rhDL7zwgiZPnpxrtlRqaqr+/PNP9e3b19Lm6uqaq99y5cpZjiUkJGjGjBl699131b17dzVt2lRz587Vzp07tXTp0svW+scff8jJyUlt2rTJc+zxxx/Xe++9p5iYmMu+Pj09Xf/73/9UqVIleXp66oYbbtDKlSslSStXrtTgwYOVkJBgmd2VM8vK0dFRN998s7755purfp4AAAAAUJZEnknWI1/+o4ys7L8RB9xQRXc3ufZZRU2r+Fke23JfqT93X7zrXs8ycNe9HIRSJUxcXJwWLVqkxx57TJ6ennmO5yz3MgxDt912m+Li4rRq1SotWbJEhw8fVv/+/XOdf/jwYf3xxx9atGiRvvnmG82cOVO9e/fW8ePHtWrVKr311lt66aWXcoVdUvYSsjvvvFPbt2/X/fffr3vvvVd79+6VJKWkpOimm26Sv7+/Nm3apO+++05Lly7VyJEjr/r+Ro4cqcDAQLVs2VKffPJJriVq69atU6dOneTq6mpp69mzp6Kjo3Pt6bRs2TJVqFBB9evXt7StXLlSwcHBqlWrloYNG5YrLNq8ebMyMjLUo0cPS1vFihXVoEEDrV279rK1/vXXX2rRokW+x+69917VqFEj30Avx+DBg/X3339r3rx52rFjh/r166ebbrpJBw8eVNu2bfX+++/Lx8fHMrvrmWeesby2VatWWr169WX7BgAAAICyJiElQ0PmbNK5lAxJUoeagXq1T12ZTFfeO+pKapX3lue/G4pvjYq3RpnXZPGei6HUjWVkPympDN59r/9v/XXmwplivWage6Dm95lfoHMPHTokwzBUp06dK563dOlS7dixQxEREQoNDZUkffnll6pfv742bdqkli1bSpLMZrNmzpwpb29v1atXT126dNH+/fu1cOFCOTg4qHbt2nrrrbe0cuXKXPsw9evXz7JsbcKECVqyZImmTJmijz/+WF999ZUuXLigL774whKcTZ06Vbfccoveeust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hYWFyWQyyWQyycPDQw0aNND06dNlGIa6d++unj175unz448/lq+vr6Kioor77QAAAAAAkMu55HR9tSH771NXJwc91L6ajSvKVqeCt9ycs6OSopgp9eeeS5fuld277uUglCqB7rzzTm3fvl1z5szRgQMH9Msvv6hz586Ki4uznDN+/HidPHlSO3bs0G233aZHH31U3377rWbNmqUNGzZo+vTplnMjIiL03HPP6YMPPlCVKlVs8ZYAAAAAALCY9XeELmRkSZL6twxVkLerjSvK5uTooEaV/SRJx89dUExSqlX7//PfpXuS1JNQSk62LgC5xcfHa82aNVq5cqU6deokSapatapatWqV6zxvb29VqJA9gF977TV9++23WrBggfr3768PPvhAI0eOVI8ePRQWFqahQ4eqW7duGjRoUHG/HQAAAAAAcklKzdDstZGSJCcHkx7uWDJmSeVoVsVfGyOyJ4VsjYq3WngUm5Smzf/OvqoZ7KXwQE+r9GvPmClVwnh5ecnLy0sLFixQWlpagV/n5uamjIwMSdLAgQPVrVs3DR48WFOnTtWuXbv06aefFlXJAAAAAAAU2Nz1UUpMzZQk3da0kir7e9i4otyaFdFm5wt3npSRfaPBMn/XvRxlbqZUxJ13KfPMmWK9plNgoMJ/+L5g5zo5afbs2Ro2bJg++eQTNWvWTJ06ddI999yjRo0a5Tk/MzNTc+fO1c6dOzV8+HBL+6effqoGDRpo9erV+v777xUcHGy19wMAAAAAwLVIzcjSjDVHJGXffW545+o2riivppdudn403ip9ms2GZXaYJPVpVNEq/dq7MhdKZZ45o8zTp69+og3deeed6t27t1avXq1169Zp0aJFmjRpkj7//HPLErznnntOL730ktLS0uTi4qJnn31WjzzyiKWP4OBgPfzww1qwYIFuv/12G70TAAAAAAAumr/pmM6cT5ck3dwgRNWDvGxcUV5B3q4KLeeuY3EXtONEvDKyzHJ2vL6FZiv2xyjiTLIkqW31ANUN8bFGqXavzIVSToGBdnFNNzc33Xjjjbrxxhv1yiuv6KGHHtKrr75qCaWeffZZDRo0SB4eHgoJCZHJZMp7XScnOTmVua8YAAAAAFACpWeaNX3VYcvzEV1K3iypHE1D/XUs7oJSM8zadzJJDSv7Xld/n6+OsDwe2j78essrNcpcYlHQZXQl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RERERNQpippTiqjX0RqAxOnQJk7Ht32fxtubvoEhNA5vPzwVfUNN3d06IiIiIiIiok5jKEWkEPeOHQi1dhZ+MDgCUcHG7m4OERERERER0TVhKEWkID8a1be7m0BERERERETUJbheIhERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyY6hFBERERERERERyU7b3Q24FkIIAIDVau3mllBv5PF4UFNTA6PRCLWa+S4pA+uWlIh1S0rEuiUlYt2SErFue6amnKYpt7kcRYdSNTU1AIB+/fp1c0uIiIiIiIiIiKilmpoaWCyWy76uEleKrXowj8eDwsJCBAcHQ6VSyXbdsWPH4sCBA7Jd71opqb1KaqvVakW/fv1w/vx5mM3m7m7OFSnpswWU1V4ltZV1619sr38orW4B5Xy2gLLaCiinvaxb/1JSWwHltJd1619KaiugnPaybv2rs20VQqCmpgZxcXHt9mBTdE8ptVqNvn37yn5djUajmGIHlNVeJbW1idlsVkSblfbZKqm9SmprE9atf7C9/qWUugWU9dkqqa2A8trLuvUPJbUVUF57Wbf+oaS2AsprL+vWP66lre31kGrCAZedsGzZsu5uwlVRUnuV1FalUdpnq6T2KqmtSqO0z5btpSZK+myV1FZAee1VEiV9tkpqK6C89iqJkj5bJbUVUF57lURJn62/26ro4XtE3clqtcJisaC6uloxKTcR65aUiHVLSsS6JSVi3ZISsW6VjT2liDrJYDBg+fLlMBgM3d0Uog5j3ZISsW5JiVi3pESsW1Ii1q2ysacUERERERERERHJjj2liIiIiIiIiIhIdgyliIiIiIiIiIhIdgyliIiIiIiIiIhIdgylqNdavXo1xo4di+DgYERFReGee+7B8ePHfY4RQmDFihWIi4tDQEAAbrvtNuTk5Hhfr6iowKOPPoqkpCSYTCb0798f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",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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ixYt4ty5c/Ts2ZOdO3emKBLfvHlztm/fzo4dOzh06BBXr17liy++SLVAftJjcTfF869fv54sIZiWJ598krp16zJq1KhUa3NduHABwzDw9/dPcU1s3bqVS5cupTumpHju5jksIiJyv5wdHYCIiEheU6VKFXtx8zZt2mCxWJgxYwa//vorjz32mD0BEBoammLfc+fOYTabKVy4cJbEmhTLf4uwA5w/fz5TekvNnj3bXrz7q6++SlaQGaBr165s3749XccaMGAAM2bMYN++ffz4449ptitSpEiajzeAj4/PXdyDzPX333/be1OlltjaunUrhw4dSrNeUZLz58+nus7V1ZX8+fPfVUwLFy4kOjqaBQsWJEv83akA+a369+/Piy++SFBQECdOnCA0NJT+/fsna1O6dGl70u3IkSP8/PPPvPfee8THx991kW5PT0/efPNN5s+fz4EDB5JtK1iwoP0azQw+Pj6Eh4ffsZ3JZOLjjz+mffv2fP3116kex2QysWHDBnty7FaprUtLUjzZ6bkuIiK5n3pKiYiIONiECRMoXLgw77zzDlarlUqVKlGiRAl++uknDMOwt4uOjua3336zz8iXFRo1aoSbm1uKIWFbt269q6Fq6TVnzhyeffZZnn76aWbMmJEiIQW2REz9+vWT/UtLkyZNGDBgAN27d6d79+5ptmvbti2HDh1i165dydZ/9913mEwm2rRpc9f35V56T6XHzJkzMZvNLFy4kDVr1iT79/333wOk6PmTmgULFiQbthYVFcXixYtp0aJFsqGJ6ZH0d7o1CWIYBt988026j9GrVy/c3d2ZM2cOc+bMoUSJEnTo0CHN9hUrVmT06NHUqFEjxd/tv1JLOAIEBQUBN3vEZZXKlStz/PjxdLVt164d7du3Z+zYsSl6sD300EMYhsHZs2dTXBP169enRo0a9rZ36oWXVGD/TslMERGRjKSeUiIiIg5WuHBh3nzzTd544w1++uknnn76aSZMmMBTTz3FQw89xKBBg4iLi+OTTz7h6tWrfPTRR1kWm7e3NyNGjGD8+PEULlyY7t27c+bMGcaMGUOxYsWS1bxKy6lTp+w9m5K+iP/6668AlClTxp5U+uWXXxg4cCC1a9dm0KBBbNu2Ldlx6tSpc1c9P5KkZzjbK6+8wnfffUeXLl0YO3YspUuXZsmSJUydOpUXXngh2cyI6ZWU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PHmSqVOn5viElIiIiGQOJaVEslg+Vyf6NCkDgMVqMGtjsEPjERGRvKNWrVo888wzWXa+hg0b0rNnzyw7n4iIiOQsSkqJOECfJqVxd7FdfvO2hxARk+DgiERERERERESylpJSIg5QJL8bj9ezTesdE2/hh39OOTgiERERERERkaylpJSIgzzboizmG7VrZ28KJjbB4tiARERERERERLKQklIiDlK6iCedq9um0r50LY7fd591cEQiIiIiIiIiWUdJKREHer5loP32N+tPYLUaDoxGREREREREJOsoKSXiQLUCCtE40BuAE5eiWRl0wcERiYiIiIiIiGQNJaVEHGxQq3L229PXHXdgJCIiIiIiIiJZR0kpEQdrXdGXSv4FANgVcpUdweEOjkhERLKayWRi4cKFjg4jW7h8+TJ+fn4EBwdn2TkbNGjAggULsux8IiIiYqOklIiDmUymZLWlvlp3woHRiIjkXefPn2fo0KEEBgbi5uZGQEAAXbt2ZdWqVY4O7Z6ZTKYU/7766qtkbfbv30+rVq3Ily8fJUqUYOzYsRhGyhqHc+bMoXHjxgD069cvxXGTtiWJi4tj6NCh+Pj44OnpSbdu3Thz5swdYx4/fjxdu3alTJkyAAQHB2MymfDz8yMqKipZ29q1a/Pee++l+/GYM2cOhQoVSrH+7bffZuTIkVit1nQfS0RERO6fklIi2UDXWsUp6uUOwN9BFzgWds3BEYmI5C3BwcHUq1eP1atXM2HCBPbv38+yZcto06YNL730kqPDuy+zZ88mNDTU/q9v3772bZGRkbRv357ixYuzfft2Jk+ezKeffsrEiRNTHGfRokU8/PDD9uVOnTolO+7SpUuTtR8+fDi///478+bNY+PGjVy7do2HHnoIi8WSZqzXr19n5syZPPvssym2RUVF8emnn97LQ3BHXbp0ISIiguXLl2fK8UVERCR1SkqJZAOuzmYGNi9rX/5mvXpLiYhkpRdffBGTycS2bdt47LHHqFixItWqVWPEiBFs3brV3i4kJISHH36Y/Pnz4+XlxRNPPMGFCzcnqXjvvfeoXbs2s2bNolSpUuTPn58XXngBi8XChAkTKFq0KH5+fnzwwQcpYggNDaVz587ky5ePwMBAfv3112Tb9+/fzwMPPEC+fPkoUqQIzz//PNeu3flHjEKFClG0aFH7v3z58tm3/fjjj8TG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",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Latest holdings:\n",
      "  Momentum (Latest): TSLA, AVGO, WMT, V, JPM\n",
      "  Low-Vol (Latest): KO, MCD, HD, COST, PEP\n",
      "  Combo (Latest): MCD, V, KO, WMT, COST\n",
      "\n",
      "Average monthly turnover:\n",
      "  Momentum Avg Turnover: 20.2%\n",
      "  Low-Vol Avg Turnover: 11.1%\n",
      "  Combo Avg Turnover: 25.3%\n",
      "\n",
      "Saved: monthly_returns.csv, performance_summary.csv\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python3\n",
    "# -*- coding: utf-8 -*-\n",
    "\n",
    "\"\"\"\n",
    "Condensed Multi-Factor Strategy (Momentum + Low Volatility)\n",
    "- Monthly rebalanced, equal-weight Top-N portfolios\n",
    "- Costs from turnover (round-trip bps)\n",
    "- Benchmarked to SPY\n",
    "\"\"\"\n",
    "\n",
    "from __future__ import annotations\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import yfinance as yf\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# --------------------------- Config ---------------------------\n",
    "TICKERS = [\n",
    "    \"AAPL\",\"MSFT\",\"NVDA\",\"AMZN\",\"GOOGL\",\"META\",\"AVGO\",\"TSLA\",\n",
    "    \"LLY\",\"HD\",\"KO\",\"MCD\",\"COST\",\"WMT\",\"PEP\",\"BAC\",\"JPM\",\"V\",\"MA\",\"XOM\"\n",
    "]\n",
    "START = \"2019-01-01\"          # backtest start\n",
    "END   = None                  # to latest\n",
    "TOP_N = 5                     # number of names per portfolio\n",
    "COST_BPS_ROUNDTRIP = 20.0     # round-trip trading cost in bps per monthly rebalance\n",
    "RF_ANNUAL = 0.02              # risk-free assumption for Sharpe\n",
    "MOM_LB_MONTHS = 12            # 12-1 momentum lookback (skip handled via shift)\n",
    "LV_LB_DAYS = 126              # ~6m of trading days for vol\n",
    "COMBO_WEIGHT_MOM = 0.5        # 50/50 blend (1.0 = pure Momentum, 0.0 = pure Low-Vol)\n",
    "\n",
    "# ------------------------ Small utilities ---------------------\n",
    "def resample_monthly_last(px: pd.DataFrame | pd.Series) -> pd.DataFrame | pd.Series:\n",
    "    \"\"\"Business-day fill forward, monthly end (ME) last price.\"\"\"\n",
    "    return px.asfreq(\"B\").ffill().resample(\"ME\").last()\n",
    "\n",
    "def to_series(x) -> pd.Series:\n",
    "    \"\"\"Robustly coerce 1-D data to Series.\"\"\"\n",
    "    if x is None:\n",
    "        return None\n",
    "    if isinstance(x, pd.Series):\n",
    "        return x.dropna()\n",
    "    if isinstance(x, pd.DataFrame):\n",
    "        if x.shape[1] == 1:\n",
    "            return x.iloc[:, 0].dropna()\n",
    "        raise ValueError(\"Expected 1-column DataFrame.\")\n",
    "    arr = np.asarray(x).squeeze()\n",
    "    return pd.Series(arr).dropna()\n",
    "\n",
    "# ------------------------ Factor signals ----------------------\n",
    "def momentum_12_1(px_m: pd.DataFrame, lb: int = 12, skip: int = 1) -> pd.DataFrame:\n",
    "    \"\"\"12–1 momentum on monthly closes, shifted to skip the most recent month.\"\"\"\n",
    "    r12 = px_m.pct_change(lb)\n",
    "    r1  = px_m.pct_change(1)\n",
    "    mom = ((1 + r12) / (1 + r1) - 1).shift(skip)\n",
    "    return mom\n",
    "\n",
    "def low_vol_daily(px_d: pd.DataFrame, lb_days: int = 126) -> pd.DataFrame:\n",
    "    \"\"\"Negative trailing daily volatility (annualised) — higher is better.\"\"\"\n",
    "    vol = px_d.pct_change().rolling(lb_days).std() * np.sqrt(252)\n",
    "    return -vol  # note the minus sign; higher = better\n",
    "\n",
    "def xsec_rank(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    \"\"\"Cross-sectional percentile ranks each month (higher = better).\"\"\"\n",
    "    return df.replace([np.inf, -np.inf], np.nan).rank(axis=1, pct=True)\n",
    "\n",
    "# -------------------- Portfolio construction ------------------\n",
    "def _weights_from_holdings(holdings, universe) -> pd.Series:\n",
    "    w = pd.Series(0.0, index=universe)\n",
    "    if len(holdings):\n",
    "        w.loc[holdings] = 1.0 / len(holdings)\n",
    "    return w\n",
    "\n",
    "def build_portfolio_with_costs(\n",
    "    px_d: pd.DataFrame,\n",
    "    score_m: pd.DataFrame,\n",
    "    top_n: int = 5,\n",
    "    tc_bps_roundtrip: float = 20.0\n",
    "):\n",
    "    \"\"\"\n",
    "    Monthly rebalance using prior month-end scores:\n",
    "      - pick top_n by score, equal-weight for next month\n",
    "      - one-way turnover = 0.5 * sum(|w_t - w_{t-1}|)\n",
    "      - cost = turnover * (roundtrip_bps / 1e4)\n",
    "    Returns: gross (Series), net (Series), holdings (list[dict]), turnover (Series)\n",
    "    \"\"\"\n",
    "    mp = resample_monthly_last(px_d)\n",
    "    mrets = mp.pct_change()\n",
    "    months = score_m.index\n",
    "    universe = mp.columns.tolist()\n",
    "\n",
    "    gross_out, net_out, to_out, holds = [], [], [], []\n",
    "    prev_w = pd.Series(0.0, index=universe)\n",
    "\n",
    "    for i in range(1, len(months)):\n",
    "        date, prev_date = months[i], months[i - 1]\n",
    "        s = score_m.loc[prev_date].dropna()\n",
    "        if len(s) < top_n:\n",
    "            continue\n",
    "        top = s.nlargest(top_n).index.tolist()\n",
    "        new_w = _weights_from_holdings(top, universe)\n",
    "        mret = mrets.loc[date, top].mean(skipna=True)\n",
    "\n",
    "        turnover = 0.5 * (new_w - prev_w).abs().sum()\n",
    "        cost = turnover * (tc_bps_roundtrip / 1e4)\n",
    "        net = mret - cost\n",
    "\n",
    "        gross_out.append((date, mret))\n",
    "        net_out.append((date, net))\n",
    "        to_out.append((date, turnover))\n",
    "        holds.append({\"date\": date, \"holdings\": top})\n",
    "        prev_w = new_w\n",
    "\n",
    "    gross = pd.Series(dict(gross_out)).sort_index()\n",
    "    net   = pd.Series(dict(net_out)).sort_index()\n",
    "    to    = pd.Series(dict(to_out)).sort_index()\n",
    "    return gross, net, holds, to\n",
    "\n",
    "# --------------------- Performance analytics ------------------\n",
    "def performance_stats(returns, bench=None, periods_per_year: int = 12, rf: float = 0.02) -> dict:\n",
    "    r = to_series(returns)\n",
    "    if r is None or r.empty:\n",
    "        return {}\n",
    "    total = (1 + r).prod() - 1\n",
    "    ann   = (1 + total) ** (periods_per_year / len(r)) - 1\n",
    "    vol   = r.std() * np.sqrt(periods_per_year)\n",
    "    sharpe = (ann - rf) / vol if vol > 0 else 0.0\n",
    "    cum = (1 + r).cumprod()\n",
    "    maxdd = (cum / cum.cummax() - 1).min()\n",
    "\n",
    "    out = {\n",
    "        \"Total Return\": f\"{total:.1%}\",\n",
    "        \"Annualized Return\": f\"{ann:.1%}\",\n",
    "        \"Volatility\": f\"{vol:.1%}\",\n",
    "        \"Sharpe\": f\"{sharpe:.2f}\",\n",
    "        \"Max Drawdown\": f\"{maxdd:.1%}\",\n",
    "    }\n",
    "\n",
    "    if bench is not None:\n",
    "        b = to_series(bench).reindex(r.index).dropna()\n",
    "        rb = r.reindex(b.index).dropna()\n",
    "        b  = b.reindex(rb.index)\n",
    "        if len(rb) >= 2:\n",
    "            cov_rb = np.cov(rb.values, b.values, ddof=1)[0, 1]\n",
    "            var_b  = np.var(b.values, ddof=1)\n",
    "            beta = cov_rb / var_b if var_b != 0 else np.nan\n",
    "            ex   = rb - b\n",
    "            te   = ex.std() * np.sqrt(periods_per_year)\n",
    "            ir   = (ex.mean() * periods_per_year / te) if te > 1e-12 else 0.0\n",
    "        else:\n",
    "            beta, te, ir = np.nan, np.nan, 0.0\n",
    "        out.update({\n",
    "            \"Beta vs SPY\": f\"{beta:.2f}\",\n",
    "            \"Tracking Error\": \"n/a\" if np.isnan(te) else f\"{te:.1%}\",\n",
    "            \"Information Ratio\": f\"{ir:.2f}\",\n",
    "        })\n",
    "    return out\n",
    "\n",
    "def rolling_alpha(strategy: pd.Series, bench: pd.Series, window: int = 12) -> pd.Series:\n",
    "    aligned = pd.concat([to_series(strategy), to_series(bench)], axis=1).dropna()\n",
    "    if aligned.empty:\n",
    "        return pd.Series(dtype=float)\n",
    "    s, b = aligned.iloc[:, 0], aligned.iloc[:, 1]\n",
    "    roll_s = (1 + s).rolling(window).apply(np.prod, raw=True) - 1\n",
    "    roll_b = (1 + b).rolling(window).apply(np.prod, raw=True) - 1\n",
    "    return (roll_s - roll_b).dropna()\n",
    "\n",
    "# ------------------------------ Main --------------------------\n",
    "def main():\n",
    "    print(\"Downloading prices...\")\n",
    "    px_d = yf.download(TICKERS, start=START, end=END, auto_adjust=True, progress=False)[\"Close\"]\n",
    "    if isinstance(px_d, pd.Series):  # ensure DataFrame\n",
    "        px_d = px_d.to_frame()\n",
    "\n",
    "    # Benchmark (monthly % returns, named Series)\n",
    "    spy_px = yf.download(\"SPY\", start=START, end=END, auto_adjust=True, progress=False)[\"Close\"]\n",
    "    spy_m = resample_monthly_last(spy_px).pct_change().dropna().squeeze()\n",
    "    spy_m.name = \"SPY\"\n",
    "\n",
    "    # Signals (monthly)\n",
    "    px_m = resample_monthly_last(px_d)\n",
    "    mom_scores = momentum_12_1(px_m, lb=MOM_LB_MONTHS, skip=1)\n",
    "    lv_scores  = low_vol_daily(px_d, lb_days=LV_LB_DAYS).resample(\"ME\").last()\n",
    "\n",
    "    # Percentile ranks and blend\n",
    "    mom_rank = xsec_rank(mom_scores)\n",
    "    lv_rank  = xsec_rank(lv_scores)\n",
    "    combo = COMBO_WEIGHT_MOM * mom_rank + (1 - COMBO_WEIGHT_MOM) * lv_rank\n",
    "\n",
    "    print(\"Building portfolios...\")\n",
    "    mom_gross, mom_net, mom_hold, mom_to = build_portfolio_with_costs(px_d, mom_rank, TOP_N, COST_BPS_ROUNDTRIP)\n",
    "    lv_gross,  lv_net,  lv_hold,  lv_to  = build_portfolio_with_costs(px_d, lv_rank,  TOP_N, COST_BPS_ROUNDTRIP)\n",
    "    cb_gross,  cb_net,  cb_hold,  cb_to  = build_portfolio_with_costs(px_d, combo,    TOP_N, COST_BPS_ROUNDTRIP)\n",
    "\n",
    "    # Align benchmark to each series for stats\n",
    "    strategies = {\n",
    "        \"Momentum (Net)\": mom_net,\n",
    "        \"Low-Vol (Net)\": lv_net,\n",
    "        \"Combo 50/50 (Net)\": cb_net,\n",
    "        \"SPY\": spy_m\n",
    "    }\n",
    "\n",
    "    print(\"\\nPerformance (monthly basis):\")\n",
    "    print(\"=\" * 70)\n",
    "    rows = []\n",
    "    for name, ret in strategies.items():\n",
    "        if name == \"SPY\":\n",
    "            stats = performance_stats(ret)\n",
    "        else:\n",
    "            stats = performance_stats(ret, spy_m.reindex(ret.index))\n",
    "        rows.append({\"Strategy\": name, **stats})\n",
    "\n",
    "    perf_df = pd.DataFrame(rows).set_index(\"Strategy\")\n",
    "    print(perf_df)\n",
    "\n",
    "    # ---- Plots ----\n",
    "    # 1) Cumulative performance (Net vs SPY)\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    for name, ret in {\"Momentum (Net)\": mom_net, \"Low-Vol (Net)\": lv_net,\n",
    "                      \"Combo 50/50 (Net)\": cb_net, \"SPY\": spy_m}.items():\n",
    "        if len(ret) > 0:\n",
    "            (1 + ret).cumprod().plot(label=name, linewidth=2)\n",
    "    plt.title(\"Cumulative Performance (Monthly, Net)\")\n",
    "    plt.xlabel(\"Date\"); plt.ylabel(\"Growth of $1\")\n",
    "    plt.grid(True, alpha=0.3); plt.legend(); plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "    # 2) Rolling 12-month alpha (Net vs SPY)\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    for name, ret in {\"Momentum (Net)\": mom_net, \"Low-Vol (Net)\": lv_net,\n",
    "                      \"Combo 50/50 (Net)\": cb_net}.items():\n",
    "        if len(ret) > 12:\n",
    "            rolling_alpha(ret, spy_m.reindex(ret.index)).plot(label=name, linewidth=2)\n",
    "    plt.axhline(0, linestyle=\"--\", alpha=0.6)\n",
    "    plt.title(\"Rolling 12-Month Alpha vs SPY (Net)\")\n",
    "    plt.xlabel(\"Date\"); plt.ylabel(\"Alpha\")\n",
    "    plt.grid(True, alpha=0.3); plt.legend(); plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "    # Latest holdings + average turnover\n",
    "    latest = {\n",
    "        \"Momentum (Latest)\": mom_hold[-1][\"holdings\"] if mom_hold else [],\n",
    "        \"Low-Vol (Latest)\": lv_hold[-1][\"holdings\"] if lv_hold else [],\n",
    "        \"Combo (Latest)\": cb_hold[-1][\"holdings\"] if cb_hold else [],\n",
    "    }\n",
    "    avg_to = {\n",
    "        \"Momentum Avg Turnover\": float(mom_to.mean()) if not mom_to.empty else np.nan,\n",
    "        \"Low-Vol Avg Turnover\": float(lv_to.mean())  if not lv_to.empty else np.nan,\n",
    "        \"Combo Avg Turnover\": float(cb_to.mean())    if not cb_to.empty else np.nan,\n",
    "    }\n",
    "\n",
    "    print(\"\\nLatest holdings:\")\n",
    "    for k, v in latest.items():\n",
    "        print(f\"  {k}: {', '.join(v) if v else '(n/a)'}\")\n",
    "    print(\"\\nAverage monthly turnover:\")\n",
    "    for k, v in avg_to.items():\n",
    "        print(f\"  {k}: {v:.1%}\" if pd.notna(v) else f\"  {k}: n/a\")\n",
    "\n",
    "    # Optional CSV exports\n",
    "    ret_df = pd.concat({\n",
    "        \"MOM_Net\": mom_net, \"LV_Net\": lv_net, \"Combo_Net\": cb_net, \"SPY\": spy_m\n",
    "    }, axis=1)\n",
    "    ret_df.to_csv(\"monthly_returns.csv\")\n",
    "    perf_df.to_csv(\"performance_summary.csv\")\n",
    "    print(\"\\nSaved: monthly_returns.csv, performance_summary.csv\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "64b63f33-1d35-41a3-a96f-3db7d2847050",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Artifacts saved to ./artifacts\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python3\n",
    "# -*- coding: utf-8 -*-\n",
    "\"\"\"\n",
    "multifactor_pipeline.py — one-file pipeline + dashboard\n",
    "\n",
    "Modes:\n",
    "  build     -> download data, build strategies, save artifacts & charts\n",
    "  ff        -> FF5 + Momentum regression (HAC), save betas CSV/PNG\n",
    "  onepager  -> assemble a one-pager PDF from artifacts\n",
    "  all       -> build + ff + onepager\n",
    "  app       -> Streamlit dashboard (run via: streamlit run multifactor_pipeline.py -- --mode app)\n",
    "\"\"\"\n",
    "\n",
    "from __future__ import annotations\n",
    "import argparse\n",
    "from pathlib import Path\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ----------------------- Config -----------------------\n",
    "ART = Path(\"artifacts\"); ART.mkdir(exist_ok=True)\n",
    "TICKERS = [\n",
    "    \"AAPL\",\"MSFT\",\"NVDA\",\"AMZN\",\"GOOGL\",\"META\",\"AVGO\",\"TSLA\",\n",
    "    \"LLY\",\"HD\",\"KO\",\"MCD\",\"COST\",\"WMT\",\"PEP\",\"BAC\",\"JPM\",\"V\",\"MA\",\"XOM\"\n",
    "]\n",
    "START = \"2018-01-01\"\n",
    "BENCH = \"SPY\"\n",
    "TOP_QUANTILE = 0.20          # top 20% long-only bucket\n",
    "TC_BPS_ROUNDTRIP = 0.0       # monthly turnover cost in bps (set 20.0 for 0.20%)\n",
    "RISK_FREE_ANNUAL = 0.02\n",
    "\n",
    "# -------------------- Utilities -----------------------\n",
    "def _safe_imports_for_build():\n",
    "    import yfinance as yf  # lazy import so 'ff'/'onepager' don't require yf\n",
    "    return yf\n",
    "\n",
    "def resample_me(px: pd.Series | pd.DataFrame) -> pd.Series | pd.DataFrame:\n",
    "    return px.asfreq(\"B\").ffill().resample(\"ME\").last()\n",
    "\n",
    "def rank_pct(df: pd.DataFrame, high_is_good: bool = True) -> pd.DataFrame:\n",
    "    r = df.replace([np.inf, -np.inf], np.nan).rank(axis=1, pct=True)\n",
    "    return r if high_is_good else 1 - r\n",
    "\n",
    "def stats_monthly(r: pd.Series, b: pd.Series | None = None, rf_annual: float = RISK_FREE_ANNUAL) -> dict:\n",
    "    r = pd.Series(r).dropna()\n",
    "    if r.empty: return {}\n",
    "    total = (1 + r).prod() - 1\n",
    "    ann   = (1 + total) ** (12 / len(r)) - 1\n",
    "    vol   = r.std() * np.sqrt(12)\n",
    "    sharpe = (ann - rf_annual) / vol if vol > 0 else np.nan\n",
    "    out = {\"Total Return\": f\"{total:.1%}\", \"Annualized Return\": f\"{ann:.1%}\",\n",
    "           \"Volatility\": f\"{vol:.1%}\", \"Sharpe Ratio\": f\"{sharpe:.2f}\"}\n",
    "    if b is not None:\n",
    "        a = pd.concat([r, b], axis=1).dropna()\n",
    "        if len(a) > 2:\n",
    "            ex = a.iloc[:, 0] - a.iloc[:, 1]\n",
    "            te = ex.std() * np.sqrt(12)\n",
    "            ir = (ex.mean() * 12 / te) if te > 0 else np.nan\n",
    "            out |= {\"Tracking Error\": f\"{te:.1%}\", \"Information Ratio\": f\"{ir:.2f}\"}\n",
    "    return out\n",
    "\n",
    "# ---------------- Strategy building -------------------\n",
    "def build_long_only_equal_weight(rets_m: pd.DataFrame, signal: pd.DataFrame, top_q: float = 0.20,\n",
    "                                 tc_bps_roundtrip: float = 0.0):\n",
    "    sig_lag = signal.shift(1)\n",
    "    top_mask = sig_lag.apply(lambda s: s >= s.quantile(1 - top_q), axis=1)\n",
    "    w = top_mask.div(top_mask.sum(axis=1), axis=0).fillna(0.0)\n",
    "    gross = (w * rets_m).sum(axis=1)\n",
    "    turnover = w.sub(w.shift(1)).abs().sum(axis=1) / 2.0\n",
    "    cost = turnover * (tc_bps_roundtrip / 1e4)\n",
    "    net = gross - cost\n",
    "    return net.rename(\"return\"), turnover.rename(\"turnover\")\n",
    "\n",
    "def build_artifacts():\n",
    "    yf = _safe_imports_for_build()\n",
    "\n",
    "    # Universe prices\n",
    "    px = yf.download(TICKERS, start=START, auto_adjust=True, progress=False)[\"Close\"]\n",
    "    if isinstance(px, pd.Series): px = px.to_frame()\n",
    "    px_m = resample_me(px)\n",
    "    rets_m = px_m.pct_change().dropna(how=\"all\")\n",
    "\n",
    "    # Signals (monthly)\n",
    "    mom = ((1 + px_m.pct_change(12)) / (1 + px_m.pct_change(1)) - 1)\n",
    "    lv  = -(rets_m.rolling(6).std() * np.sqrt(12))\n",
    "\n",
    "    mom_sig = rank_pct(mom, True)\n",
    "    lv_sig  = rank_pct(lv,  True)\n",
    "\n",
    "    # Portfolios (long-only)\n",
    "    mom_net, mom_to = build_long_only_equal_weight(rets_m, mom_sig, TOP_QUANTILE, TC_BPS_ROUNDTRIP)\n",
    "    lv_net,  lv_to  = build_long_only_equal_weight(rets_m, lv_sig,  TOP_QUANTILE, TC_BPS_ROUNDTRIP)\n",
    "    combo_net = (0.5 * mom_net + 0.5 * lv_net).rename(\"COMBO_net\")\n",
    "\n",
    "    # Benchmark SPY — ensure Series + name\n",
    "    spy_px = yf.download(BENCH, start=START, auto_adjust=True, progress=False)[\"Close\"]\n",
    "    if isinstance(spy_px, pd.DataFrame):\n",
    "        spy_px = spy_px.squeeze(\"columns\")\n",
    "    spy = resample_me(spy_px).pct_change().dropna()\n",
    "    spy.name = \"SPY\"\n",
    "\n",
    "    # Align & save\n",
    "    aligned = pd.concat([mom_net.rename(\"MOM_net\"),\n",
    "                         lv_net.rename(\"LV_net\"),\n",
    "                         combo_net.rename(\"COMBO_net\"),\n",
    "                         spy], axis=1).dropna()\n",
    "    aligned.to_parquet(ART / \"aligned_returns.parquet\")\n",
    "    aligned.to_csv(ART / \"aligned_returns.csv\")\n",
    "\n",
    "    # Performance table\n",
    "    rows = []\n",
    "    for col in [\"MOM_net\", \"LV_net\", \"COMBO_net\"]:\n",
    "        rows.append({\"Strategy\": col, **stats_monthly(aligned[col], aligned[\"SPY\"])})\n",
    "    rows.append({\"Strategy\": \"SPY\", **stats_monthly(aligned[\"SPY\"])})\n",
    "    perf = pd.DataFrame(rows).set_index(\"Strategy\")\n",
    "    perf.to_parquet(ART / \"perf_summary.parquet\")\n",
    "    perf.to_csv(ART / \"perf_summary.csv\")\n",
    "\n",
    "    # Charts\n",
    "    cum = (1 + aligned[[\"COMBO_net\", \"SPY\"]]).cumprod()\n",
    "    ax = cum.plot(figsize=(8, 3), linewidth=2); ax.grid(alpha=.3); ax.set_ylabel(\"Multiple\")\n",
    "    ax.figure.tight_layout(); ax.figure.savefig(ART / \"chart_cumulative.png\", dpi=150); plt.close(ax.figure)\n",
    "\n",
    "    roll = (1 + aligned[[\"COMBO_net\", \"SPY\"]]).rolling(12).apply(np.prod, raw=True) - 1\n",
    "    ex = (roll[\"COMBO_net\"] - roll[\"SPY\"]).dropna()\n",
    "    ax = ex.plot(figsize=(8, 3), linewidth=2); ax.axhline(0, ls=\"--\", c=\"k\", alpha=.5)\n",
    "    ax.grid(alpha=.3); ax.set_ylabel(\"Excess\"); ax.figure.tight_layout()\n",
    "    ax.figure.savefig(ART / \"chart_rolling_alpha.png\", dpi=150); plt.close(ax.figure)\n",
    "\n",
    "    pd.concat({\"MOM_turnover\": mom_to, \"LV_turnover\": lv_to}, axis=1).to_csv(ART / \"turnover.csv\")\n",
    "    print(\"✅ Artifacts saved to ./artifacts\")\n",
    "\n",
    "# ---------------- Factor attribution -----------------\n",
    "def run_ff_regression():\n",
    "    import statsmodels.api as sm\n",
    "    from pandas_datareader import data as web\n",
    "\n",
    "    aligned = pd.read_parquet(ART / \"aligned_returns.parquet\")\n",
    "    aligned.index = pd.to_datetime(aligned.index)\n",
    "    best = aligned[\"COMBO_net\"].rename(\"strat\")\n",
    "\n",
    "    ff5 = web.DataReader(\"F-F_Research_Data_5_Factors_2x3\", \"famafrench\")[0]\n",
    "    mom = web.DataReader(\"F-F_Momentum_Factor\", \"famafrench\")[0]\n",
    "    ff  = ff5.join(mom, how=\"inner\")\n",
    "    # convert % -> decimals once if needed\n",
    "    if (ff.abs().mean() > 1).any():\n",
    "        ff = ff / 100.0\n",
    "    ff.index = ff.index.to_timestamp(\"M\")\n",
    "    ff.columns = (ff.columns.str.strip()\n",
    "                  .str.replace(\"Mkt-RF\", \"MktRF\", regex=False)\n",
    "                  .str.replace(\"Mom.\", \"Mom\", regex=False))\n",
    "\n",
    "    df = pd.concat([best, ff], axis=1, join=\"inner\").dropna()\n",
    "    if df.empty: raise RuntimeError(\"No overlap between strategy and FF factors.\")\n",
    "\n",
    "    y = df[\"strat\"] - df[\"RF\"]\n",
    "    X = sm.add_constant(df[[\"MktRF\",\"SMB\",\"HML\",\"RMW\",\"CMA\",\"Mom\"]])\n",
    "    ols = sm.OLS(y, X).fit(cov_type=\"HAC\", cov_kwds={\"maxlags\": 6})\n",
    "\n",
    "    betas = ols.params.rename({\"const\": \"Alpha\"}).to_frame(\"coef\")\n",
    "    betas.index.name = \"factor\"\n",
    "    betas.to_csv(ART / \"ff5_mom_betas.csv\", index=True)\n",
    "\n",
    "    order = [c for c in [\"Alpha\",\"MktRF\",\"SMB\",\"HML\",\"RMW\",\"CMA\",\"Mom\"] if c in betas.index]\n",
    "    ax = betas.loc[order, \"coef\"].plot(kind=\"bar\", figsize=(7, 3), title=\"FF5 + Momentum Coefficients\")\n",
    "    ax.grid(alpha=.3); plt.tight_layout()\n",
    "    plt.savefig(ART / \"ff5_mom_betas.png\", dpi=160); plt.close()\n",
    "\n",
    "    alpha = betas.loc[\"Alpha\", \"coef\"] if \"Alpha\" in betas.index else 0.0\n",
    "    alpha_annual = (1 + alpha) ** 12 - 1\n",
    "    print(f\"✅ Regression saved. Alpha (annual): {alpha_annual:.2%} | R²: {ols.rsquared:.3f}\")\n",
    "\n",
    "# ---------------- One-pager PDF ----------------------\n",
    "def make_one_pager():\n",
    "    from matplotlib.backends.backend_pdf import PdfPages\n",
    "    perf_path, cum_png, roll_png, betas_png = ART/\"perf_summary.csv\", ART/\"chart_cumulative.png\", ART/\"chart_rolling_alpha.png\", ART/\"ff5_mom_betas.png\"\n",
    "    out_pdf = ART / \"one_pager_report.pdf\"\n",
    "    if not perf_path.exists():\n",
    "        raise FileNotFoundError(\"Missing artifacts/perf_summary.csv. Run --mode build first.\")\n",
    "    perf = pd.read_csv(perf_path)\n",
    "\n",
    "    with PdfPages(out_pdf) as pdf:\n",
    "        fig = plt.figure(figsize=(11, 8.5))\n",
    "        plt.figtext(0.05, 0.95, \"Multi-Factor Equity Strategy — One-Pager (Momentum & Low-Vol)\", fontsize=16, fontweight=\"bold\")\n",
    "        plt.figtext(0.05, 0.92, \"Period: monthly; Benchmark: SPY | Metrics: CAGR/Sharpe/MaxDD/Beta/TE/IR\", fontsize=10, color=\"dimgray\")\n",
    "\n",
    "        axT = plt.axes([0.05, 0.52, 0.43, 0.36]); axT.axis(\"off\")\n",
    "        cols_pref = [\"Strategy\",\"Total Return\",\"Annualized Return\",\"Volatility\",\"Sharpe Ratio\",\"Max Drawdown\",\"Tracking Error\",\"Information Ratio\"]\n",
    "        cols = [c for c in cols_pref if c in perf.columns]\n",
    "        table = axT.table(cellText=perf[cols].values, colLabels=cols, loc=\"center\", cellLoc=\"center\")\n",
    "        table.auto_set_font_size(False); table.set_fontsize(9); table.scale(1, 1.2)\n",
    "        axT.set_title(\"Performance Summary\", fontsize=12, pad=6)\n",
    "\n",
    "        ax1 = plt.axes([0.52, 0.60, 0.43, 0.30]); ax1.axis(\"off\")\n",
    "        ax1.imshow(plt.imread(cum_png)) if cum_png.exists() else ax1.text(0.5,0.5,\"Missing chart_cumulative.png\", ha=\"center\", va=\"center\")\n",
    "\n",
    "        ax2 = plt.axes([0.52, 0.22, 0.43, 0.30]); ax2.axis(\"off\")\n",
    "        ax2.imshow(plt.imread(roll_png)) if roll_png.exists() else ax2.text(0.5,0.5,\"Missing chart_rolling_alpha.png\", ha=\"center\", va=\"center\")\n",
    "\n",
    "        ax3 = plt.axes([0.05, 0.08, 0.43, 0.28]); ax3.axis(\"off\")\n",
    "        ax3.imshow(plt.imread(betas_png)) if betas_png.exists() else ax3.text(0.5,0.5,\"Missing ff5_mom_betas.png\", ha=\"center\", va=\"center\")\n",
    "\n",
    "        plt.figtext(0.05, 0.02, \"Educational backtest. Past performance is not indicative of future results.\", fontsize=8, color=\"gray\")\n",
    "        pdf.savefig(fig); plt.close(fig)\n",
    "\n",
    "    print(f\"✅ One-pager saved: {out_pdf}\")\n",
    "\n",
    "# ---------------- Streamlit app ----------------------\n",
    "def run_app():\n",
    "    import streamlit as st\n",
    "    st.set_page_config(page_title=\"Multi-Factor Strategy\", layout=\"wide\")\n",
    "    st.title(\"📈 Multi-Factor Equity Strategy Dashboard\")\n",
    "\n",
    "    aligned_path, perf_path, betas_png = ART/\"aligned_returns.parquet\", ART/\"perf_summary.parquet\", ART/\"ff5_mom_betas.png\"\n",
    "    if not aligned_path.exists():\n",
    "        st.error(\"Missing artifacts/aligned_returns.parquet. Run: python multifactor_pipeline.py --mode build\")\n",
    "        return\n",
    "\n",
    "    aligned = pd.read_parquet(aligned_path)\n",
    "    aligned.index = pd.to_datetime(aligned.index)\n",
    "    aligned = aligned.sort_index()\n",
    "\n",
    "    perf = pd.read_parquet(perf_path) if perf_path.exists() else None\n",
    "\n",
    "    st.sidebar.header(\"Controls\")\n",
    "    bm_col = \"SPY\" if \"SPY\" in aligned.columns else aligned.columns[-1]\n",
    "    strat_cols = [c for c in aligned.columns if c != bm_col]\n",
    "    strat = st.sidebar.selectbox(\"Strategy\", strat_cols or aligned.columns.tolist(), index=0)\n",
    "    win = st.sidebar.slider(\"Rolling window (months)\", 6, 24, 12, 1)\n",
    "\n",
    "    st.subheader(\"Performance Summary\")\n",
    "    if perf is not None and not perf.empty:\n",
    "        st.dataframe(perf.round(3), use_container_width=True)\n",
    "    else:\n",
    "        st.json(stats_monthly(aligned[strat], aligned.get(bm_col)))\n",
    "\n",
    "    st.subheader(\"Cumulative Growth of $1\")\n",
    "    cum = (1 + aligned[[strat, bm_col]].dropna()).cumprod()\n",
    "    fig1, ax1 = plt.subplots(figsize=(8, 4))\n",
    "    cum.plot(ax=ax1, linewidth=2); ax1.grid(alpha=.3); ax1.set_ylabel(\"Multiple\")\n",
    "    st.pyplot(fig1)\n",
    "\n",
    "    st.subheader(f\"Rolling {win}-Month Excess vs {bm_col}\")\n",
    "    both = aligned[[strat, bm_col]].dropna()\n",
    "    if len(both) >= win:\n",
    "        roll_s = (1 + both[strat]).rolling(win).apply(np.prod, raw=True) - 1\n",
    "        roll_b = (1 + both[bm_col]).rolling(win).apply(np.prod, raw=True) - 1\n",
    "        ex = (roll_s - roll_b).dropna()\n",
    "        fig2, ax2 = plt.subplots(figsize=(8, 3))\n",
    "        ex.plot(ax=ax2, linewidth=2); ax2.axhline(0, ls=\"--\", c=\"k\", alpha=.5); ax2.grid(alpha=.3); ax2.set_ylabel(\"Excess\")\n",
    "        st.pyplot(fig2)\n",
    "    else:\n",
    "        st.info(f\"Need at least {win} months.\")\n",
    "\n",
    "    st.subheader(\"FF5 + Momentum Betas\")\n",
    "    if betas_png.exists():\n",
    "        st.image(str(betas_png), use_column_width=False)\n",
    "    else:\n",
    "        st.info(\"Run factor regression: python multifactor_pipeline.py --mode ff\")\n",
    "\n",
    "    colA, colB, colC = st.columns(3)\n",
    "    if (ART / \"perf_summary.csv\").exists():\n",
    "        with colA:\n",
    "            st.download_button(\"⬇️ perf_summary.csv\",\n",
    "                               data=open(ART / \"perf_summary.csv\", \"rb\").read(),\n",
    "                               file_name=\"perf_summary.csv\", mime=\"text/csv\")\n",
    "    if (ART / \"aligned_returns.csv\").exists():\n",
    "        with colB:\n",
    "            st.download_button(\"⬇️ aligned_returns.csv\",\n",
    "                               data=open(ART / \"aligned_returns.csv\", \"rb\").read(),\n",
    "                               file_name=\"aligned_returns.csv\", mime=\"text/csv\")\n",
    "    if (ART / \"one_pager_report.pdf\").exists():\n",
    "        with colC:\n",
    "            st.download_button(\"⬇️ one_pager_report.pdf\",\n",
    "                               data=open(ART / \"one_pager_report.pdf\", \"rb\").read(),\n",
    "                               file_name=\"one_pager_report.pdf\", mime=\"application/pdf\")\n",
    "    st.caption(\"Educational backtest; not investment advice. © You\")\n",
    "\n",
    "# ---------------- CLI entrypoint (positional + flag) --\n",
    "def main():\n",
    "    choices = [\"build\",\"ff\",\"onepager\",\"all\",\"app\"]\n",
    "    p = argparse.ArgumentParser(description=\"All-in-one Multi-Factor (Momentum + Low-Vol) pipeline\")\n",
    "    p.add_argument(\"-m\",\"--mode\", choices=choices, help=\"what to run\")\n",
    "    p.add_argument(\"mode_pos\", nargs=\"?\", choices=choices, help=\"same as --mode (positional)\")\n",
    "    args = p.parse_args()\n",
    "    mode = args.mode or args.mode_pos or \"all\"\n",
    "\n",
    "    if mode in (\"build\",\"all\"):\n",
    "        build_artifacts()\n",
    "    if mode in (\"ff\",\"all\"):\n",
    "        run_ff_regression()\n",
    "    if mode in (\"onepager\",\"all\"):\n",
    "        make_one_pager()\n",
    "    if mode == \"app\":\n",
    "        run_app()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "87f12bf5-fcdf-42dc-b9bc-c516507dc595",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Writing multifactor_pipeline.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile multifactor_pipeline.py\n",
    "#!/usr/bin/env python3\n",
    "# -*- coding: utf-8 -*-\n",
    "\"\"\"\n",
    "multifactor_pipeline.py — one-file pipeline + dashboard\n",
    "\n",
    "Modes:\n",
    "  build     -> download data, build strategies, save artifacts & charts\n",
    "  ff        -> FF5 + Momentum regression (HAC), save betas CSV/PNG\n",
    "  onepager  -> assemble a one-pager PDF from artifacts\n",
    "  all       -> build + ff + onepager\n",
    "  app       -> Streamlit dashboard (run via: streamlit run multifactor_pipeline.py -- --mode app)\n",
    "\"\"\"\n",
    "\n",
    "from __future__ import annotations\n",
    "import argparse\n",
    "from pathlib import Path\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ----------------------- Config -----------------------\n",
    "ART = Path(\"artifacts\"); ART.mkdir(exist_ok=True)\n",
    "TICKERS = [\n",
    "    \"AAPL\",\"MSFT\",\"NVDA\",\"AMZN\",\"GOOGL\",\"META\",\"AVGO\",\"TSLA\",\n",
    "    \"LLY\",\"HD\",\"KO\",\"MCD\",\"COST\",\"WMT\",\"PEP\",\"BAC\",\"JPM\",\"V\",\"MA\",\"XOM\"\n",
    "]\n",
    "START = \"2018-01-01\"\n",
    "BENCH = \"SPY\"\n",
    "TOP_QUANTILE = 0.20          # top 20% long-only bucket\n",
    "TC_BPS_ROUNDTRIP = 0.0       # monthly turnover cost in bps (set 20.0 for 0.20%)\n",
    "RISK_FREE_ANNUAL = 0.02\n",
    "\n",
    "# -------------------- Utilities -----------------------\n",
    "def _safe_imports_for_build():\n",
    "    import yfinance as yf  # lazy import so 'ff'/'onepager' don't require yf\n",
    "    return yf\n",
    "\n",
    "def resample_me(px: pd.Series | pd.DataFrame) -> pd.Series | pd.DataFrame:\n",
    "    return px.asfreq(\"B\").ffill().resample(\"ME\").last()\n",
    "\n",
    "def rank_pct(df: pd.DataFrame, high_is_good: bool = True) -> pd.DataFrame:\n",
    "    r = df.replace([np.inf, -np.inf], np.nan).rank(axis=1, pct=True)\n",
    "    return r if high_is_good else 1 - r\n",
    "\n",
    "def stats_monthly(r: pd.Series, b: pd.Series | None = None, rf_annual: float = RISK_FREE_ANNUAL) -> dict:\n",
    "    r = pd.Series(r).dropna()\n",
    "    if r.empty: return {}\n",
    "    total = (1 + r).prod() - 1\n",
    "    ann   = (1 + total) ** (12 / len(r)) - 1\n",
    "    vol   = r.std() * np.sqrt(12)\n",
    "    sharpe = (ann - rf_annual) / vol if vol > 0 else np.nan\n",
    "    out = {\"Total Return\": f\"{total:.1%}\", \"Annualized Return\": f\"{ann:.1%}\",\n",
    "           \"Volatility\": f\"{vol:.1%}\", \"Sharpe Ratio\": f\"{sharpe:.2f}\"}\n",
    "    if b is not None:\n",
    "        a = pd.concat([r, b], axis=1).dropna()\n",
    "        if len(a) > 2:\n",
    "            ex = a.iloc[:, 0] - a.iloc[:, 1]\n",
    "            te = ex.std() * np.sqrt(12)\n",
    "            ir = (ex.mean() * 12 / te) if te > 0 else np.nan\n",
    "            out |= {\"Tracking Error\": f\"{te:.1%}\", \"Information Ratio\": f\"{ir:.2f}\"}\n",
    "    return out\n",
    "\n",
    "# ---------------- Strategy building -------------------\n",
    "def build_long_only_equal_weight(rets_m: pd.DataFrame, signal: pd.DataFrame, top_q: float = 0.20,\n",
    "                                 tc_bps_roundtrip: float = 0.0):\n",
    "    sig_lag = signal.shift(1)\n",
    "    top_mask = sig_lag.apply(lambda s: s >= s.quantile(1 - top_q), axis=1)\n",
    "    w = top_mask.div(top_mask.sum(axis=1), axis=0).fillna(0.0)\n",
    "    gross = (w * rets_m).sum(axis=1)\n",
    "    turnover = w.sub(w.shift(1)).abs().sum(axis=1) / 2.0\n",
    "    cost = turnover * (tc_bps_roundtrip / 1e4)\n",
    "    net = gross - cost\n",
    "    return net.rename(\"return\"), turnover.rename(\"turnover\")\n",
    "\n",
    "def build_artifacts():\n",
    "    yf = _safe_imports_for_build()\n",
    "\n",
    "    # Universe prices\n",
    "    px = yf.download(TICKERS, start=START, auto_adjust=True, progress=False)[\"Close\"]\n",
    "    if isinstance(px, pd.Series): px = px.to_frame()\n",
    "    px_m = resample_me(px)\n",
    "    rets_m = px_m.pct_change().dropna(how=\"all\")\n",
    "\n",
    "    # Signals (monthly)\n",
    "    mom = ((1 + px_m.pct_change(12)) / (1 + px_m.pct_change(1)) - 1)\n",
    "    lv  = -(rets_m.rolling(6).std() * np.sqrt(12))\n",
    "\n",
    "    mom_sig = rank_pct(mom, True)\n",
    "    lv_sig  = rank_pct(lv,  True)\n",
    "\n",
    "    # Portfolios (long-only)\n",
    "    mom_net, mom_to = build_long_only_equal_weight(rets_m, mom_sig, TOP_QUANTILE, TC_BPS_ROUNDTRIP)\n",
    "    lv_net,  lv_to  = build_long_only_equal_weight(rets_m, lv_sig,  TOP_QUANTILE, TC_BPS_ROUNDTRIP)\n",
    "    combo_net = (0.5 * mom_net + 0.5 * lv_net).rename(\"COMBO_net\")\n",
    "\n",
    "    # Benchmark SPY — ensure Series + name (fixes rename TypeError)\n",
    "    spy_px = yf.download(BENCH, start=START, auto_adjust=True, progress=False)[\"Close\"]\n",
    "    if isinstance(spy_px, pd.DataFrame):\n",
    "        spy_px = spy_px.squeeze(\"columns\")\n",
    "    spy = resample_me(spy_px).pct_change().dropna()\n",
    "    spy.name = \"SPY\"\n",
    "\n",
    "    # Align & save\n",
    "    aligned = pd.concat([mom_net.rename(\"MOM_net\"),\n",
    "                         lv_net.rename(\"LV_net\"),\n",
    "                         combo_net.rename(\"COMBO_net\"),\n",
    "                         spy], axis=1).dropna()\n",
    "    aligned.to_parquet(ART / \"aligned_returns.parquet\")\n",
    "    aligned.to_csv(ART / \"aligned_returns.csv\")\n",
    "\n",
    "    # Performance table\n",
    "    rows = []\n",
    "    for col in [\"MOM_net\", \"LV_net\", \"COMBO_net\"]:\n",
    "        rows.append({\"Strategy\": col, **stats_monthly(aligned[col], aligned[\"SPY\"])})\n",
    "    rows.append({\"Strategy\": \"SPY\", **stats_monthly(aligned[\"SPY\"])})\n",
    "    perf = pd.DataFrame(rows).set_index(\"Strategy\")\n",
    "    perf.to_parquet(ART / \"perf_summary.parquet\")\n",
    "    perf.to_csv(ART / \"perf_summary.csv\")\n",
    "\n",
    "    # Charts\n",
    "    cum = (1 + aligned[[\"COMBO_net\", \"SPY\"]]).cumprod()\n",
    "    ax = cum.plot(figsize=(8, 3), linewidth=2); ax.grid(alpha=.3); ax.set_ylabel(\"Multiple\")\n",
    "    ax.figure.tight_layout(); ax.figure.savefig(ART / \"chart_cumulative.png\", dpi=150); plt.close(ax.figure)\n",
    "\n",
    "    roll = (1 + aligned[[\"COMBO_net\", \"SPY\"]]).rolling(12).apply(np.prod, raw=True) - 1\n",
    "    ex = (roll[\"COMBO_net\"] - roll[\"SPY\"]).dropna()\n",
    "    ax = ex.plot(figsize=(8, 3), linewidth=2); ax.axhline(0, ls=\"--\", c=\"k\", alpha=.5)\n",
    "    ax.grid(alpha=.3); ax.set_ylabel(\"Excess\"); ax.figure.tight_layout()\n",
    "    ax.figure.savefig(ART / \"chart_rolling_alpha.png\", dpi=150); plt.close(ax.figure)\n",
    "\n",
    "    pd.concat({\"MOM_turnover\": mom_to, \"LV_turnover\": lv_to}, axis=1).to_csv(ART / \"turnover.csv\")\n",
    "    print(\"✅ Artifacts saved to ./artifacts\")\n",
    "\n",
    "# ---------------- Factor attribution -----------------\n",
    "def run_ff_regression():\n",
    "    import statsmodels.api as sm\n",
    "    from pandas_datareader import data as web\n",
    "\n",
    "    aligned = pd.read_parquet(ART / \"aligned_returns.parquet\")\n",
    "    aligned.index = pd.to_datetime(aligned.index)\n",
    "    best = aligned[\"COMBO_net\"].rename(\"strat\")\n",
    "\n",
    "    ff5 = web.DataReader(\"F-F_Research_Data_5_Factors_2x3\", \"famafrench\")[0]\n",
    "    mom = web.DataReader(\"F-F_Momentum_Factor\", \"famafrench\")[0]\n",
    "    ff  = ff5.join(mom, how=\"inner\")\n",
    "    # convert % -> decimals once if needed\n",
    "    if (ff.abs().mean() > 1).any():\n",
    "        ff = ff / 100.0\n",
    "    ff.index = ff.index.to_timestamp(\"M\")\n",
    "    ff.columns = (ff.columns.str.strip()\n",
    "                  .str.replace(\"Mkt-RF\", \"MktRF\", regex=False)\n",
    "                  .str.replace(\"Mom.\", \"Mom\", regex=False))\n",
    "\n",
    "    df = pd.concat([best, ff], axis=1, join=\"inner\").dropna()\n",
    "    if df.empty: raise RuntimeError(\"No overlap between strategy and FF factors.\")\n",
    "\n",
    "    y = df[\"strat\"] - df[\"RF\"]\n",
    "    X = sm.add_constant(df[[\"MktRF\",\"SMB\",\"HML\",\"RMW\",\"CMA\",\"Mom\"]])\n",
    "    ols = sm.OLS(y, X).fit(cov_type=\"HAC\", cov_kwds={\"maxlags\": 6})\n",
    "\n",
    "    betas = ols.params.rename({\"const\": \"Alpha\"}).to_frame(\"coef\")\n",
    "    betas.index.name = \"factor\"\n",
    "    betas.to_csv(ART / \"ff5_mom_betas.csv\", index=True)\n",
    "\n",
    "    order = [c for c in [\"Alpha\",\"MktRF\",\"SMB\",\"HML\",\"RMW\",\"CMA\",\"Mom\"] if c in betas.index]\n",
    "    ax = betas.loc[order, \"coef\"].plot(kind=\"bar\", figsize=(7, 3), title=\"FF5 + Momentum Coefficients\")\n",
    "    ax.grid(alpha=.3); plt.tight_layout()\n",
    "    plt.savefig(ART / \"ff5_mom_betas.png\", dpi=160); plt.close()\n",
    "\n",
    "    alpha = betas.loc[\"Alpha\", \"coef\"] if \"Alpha\" in betas.index else 0.0\n",
    "    alpha_annual = (1 + alpha) ** 12 - 1\n",
    "    print(f\"✅ Regression saved. Alpha (annual): {alpha_annual:.2%} | R²: {ols.rsquared:.3f}\")\n",
    "\n",
    "# ---------------- One-pager PDF ----------------------\n",
    "def make_one_pager():\n",
    "    from matplotlib.backends.backend_pdf import PdfPages\n",
    "    perf_path, cum_png, roll_png, betas_png = ART/\"perf_summary.csv\", ART/\"chart_cumulative.png\", ART/\"chart_rolling_alpha.png\", ART/\"ff5_mom_betas.png\"\n",
    "    out_pdf = ART / \"one_pager_report.pdf\"\n",
    "    if not perf_path.exists():\n",
    "        raise FileNotFoundError(\"Missing artifacts/perf_summary.csv. Run --mode build first.\")\n",
    "    perf = pd.read_csv(perf_path)\n",
    "\n",
    "    with PdfPages(out_pdf) as pdf:\n",
    "        fig = plt.figure(figsize=(11, 8.5))\n",
    "        plt.figtext(0.05, 0.95, \"Multi-Factor Equity Strategy — One-Pager (Momentum & Low-Vol)\", fontsize=16, fontweight=\"bold\")\n",
    "        plt.figtext(0.05, 0.92, \"Period: monthly; Benchmark: SPY | Metrics: CAGR/Sharpe/MaxDD/Beta/TE/IR\", fontsize=10, color=\"dimgray\")\n",
    "\n",
    "        axT = plt.axes([0.05, 0.52, 0.43, 0.36]); axT.axis(\"off\")\n",
    "        cols_pref = [\"Strategy\",\"Total Return\",\"Annualized Return\",\"Volatility\",\"Sharpe Ratio\",\"Max Drawdown\",\"Tracking Error\",\"Information Ratio\"]\n",
    "        cols = [c for c in cols_pref if c in perf.columns]\n",
    "        table = axT.table(cellText=perf[cols].values, colLabels=cols, loc=\"center\", cellLoc=\"center\")\n",
    "        table.auto_set_font_size(False); table.set_fontsize(9); table.scale(1, 1.2)\n",
    "        axT.set_title(\"Performance Summary\", fontsize=12, pad=6)\n",
    "\n",
    "        ax1 = plt.axes([0.52, 0.60, 0.43, 0.30]); ax1.axis(\"off\")\n",
    "        ax1.imshow(plt.imread(cum_png)) if cum_png.exists() else ax1.text(0.5,0.5,\"Missing chart_cumulative.png\", ha=\"center\", va=\"center\")\n",
    "\n",
    "        ax2 = plt.axes([0.52, 0.22, 0.43, 0.30]); ax2.axis(\"off\")\n",
    "        ax2.imshow(plt.imread(roll_png)) if roll_png.exists() else ax2.text(0.5,0.5,\"Missing chart_rolling_alpha.png\", ha=\"center\", va=\"center\")\n",
    "\n",
    "        ax3 = plt.axes([0.05, 0.08, 0.43, 0.28]); ax3.axis(\"off\")\n",
    "        ax3.imshow(plt.imread(betas_png)) if betas_png.exists() else ax3.text(0.5,0.5,\"Missing ff5_mom_betas.png\", ha=\"center\", va=\"center\")\n",
    "\n",
    "        plt.figtext(0.05, 0.02, \"Educational backtest. Past performance is not indicative of future results.\", fontsize=8, color=\"gray\")\n",
    "        pdf.savefig(fig); plt.close(fig)\n",
    "\n",
    "    print(f\"✅ One-pager saved: {out_pdf}\")\n",
    "\n",
    "# ---------------- Streamlit app ----------------------\n",
    "def run_app():\n",
    "    import streamlit as st\n",
    "    st.set_page_config(page_title=\"Multi-Factor Strategy\", layout=\"wide\")\n",
    "    st.title(\"📈 Multi-Factor Equity Strategy Dashboard\")\n",
    "\n",
    "    aligned_path, perf_path, betas_png = ART/\"aligned_returns.parquet\", ART/\"perf_summary.parquet\", ART/\"ff5_mom_betas.png\"\n",
    "    if not aligned_path.exists():\n",
    "        st.error(\"Missing artifacts/aligned_returns.parquet. Run: python multifactor_pipeline.py --mode build\")\n",
    "        return\n",
    "\n",
    "    aligned = pd.read_parquet(aligned_path)\n",
    "    aligned.index = pd.to_datetime(aligned.index)\n",
    "    aligned = aligned.sort_index()\n",
    "\n",
    "    perf = pd.read_parquet(perf_path) if perf_path.exists() else None\n",
    "\n",
    "    st.sidebar.header(\"Controls\")\n",
    "    bm_col = \"SPY\" if \"SPY\" in aligned.columns else aligned.columns[-1]\n",
    "    strat_cols = [c for c in aligned.columns if c != bm_col]\n",
    "    strat = st.sidebar.selectbox(\"Strategy\", strat_cols or aligned.columns.tolist(), index=0)\n",
    "    win = st.sidebar.slider(\"Rolling window (months)\", 6, 24, 12, 1)\n",
    "\n",
    "    st.subheader(\"Performance Summary\")\n",
    "    if perf is not None and not perf.empty:\n",
    "        st.dataframe(perf.round(3), use_container_width=True)\n",
    "    else:\n",
    "        st.json(stats_monthly(aligned[strat], aligned.get(bm_col)))\n",
    "\n",
    "    st.subheader(\"Cumulative Growth of $1\")\n",
    "    cum = (1 + aligned[[strat, bm_col]].dropna()).cumprod()\n",
    "    fig1, ax1 = plt.subplots(figsize=(8, 4))\n",
    "    cum.plot(ax=ax1, linewidth=2); ax1.grid(alpha=.3); ax1.set_ylabel(\"Multiple\")\n",
    "    st.pyplot(fig1)\n",
    "\n",
    "    st.subheader(f\"Rolling {win}-Month Excess vs {bm_col}\")\n",
    "    both = aligned[[strat, bm_col]].dropna()\n",
    "    if len(both) >= win:\n",
    "        roll_s = (1 + both[strat]).rolling(win).apply(np.prod, raw=True) - 1\n",
    "        roll_b = (1 + both[bm_col]).rolling(win).apply(np.prod, raw=True) - 1\n",
    "        ex = (roll_s - roll_b).dropna()\n",
    "        fig2, ax2 = plt.subplots(figsize=(8, 3))\n",
    "        ex.plot(ax=ax2, linewidth=2); ax2.axhline(0, ls=\"--\", c=\"k\", alpha=.5); ax2.grid(alpha=.3); ax2.set_ylabel(\"Excess\")\n",
    "        st.pyplot(fig2)\n",
    "    else:\n",
    "        st.info(f\"Need at least {win} months.\")\n",
    "\n",
    "    st.subheader(\"FF5 + Momentum Betas\")\n",
    "    if betas_png.exists():\n",
    "        st.image(str(betas_png), use_column_width=False)\n",
    "    else:\n",
    "        st.info(\"Run factor regression: python multifactor_pipeline.py --mode ff\")\n",
    "\n",
    "    colA, colB, colC = st.columns(3)\n",
    "    if (ART / \"perf_summary.csv\").exists():\n",
    "        with colA:\n",
    "            st.download_button(\"⬇️ perf_summary.csv\",\n",
    "                               data=open(ART / \"perf_summary.csv\", \"rb\").read(),\n",
    "                               file_name=\"perf_summary.csv\", mime=\"text/csv\")\n",
    "    if (ART / \"aligned_returns.csv\").exists():\n",
    "        with colB:\n",
    "            st.download_button(\"⬇️ aligned_returns.csv\",\n",
    "                               data=open(ART / \"aligned_returns.csv\", \"rb\").read(),\n",
    "                               file_name=\"aligned_returns.csv\", mime=\"text/csv\")\n",
    "    if (ART / \"one_pager_report.pdf\").exists():\n",
    "        with colC:\n",
    "            st.download_button(\"⬇️ one_pager_report.pdf\",\n",
    "                               data=open(ART / \"one_pager_report.pdf\", \"rb\").read(),\n",
    "                               file_name=\"one_pager_report.pdf\", mime=\"application/pdf\")\n",
    "    st.caption(\"Educational backtest; not investment advice. © You\")\n",
    "\n",
    "# ---------------- CLI entrypoint (positional + flag) --\n",
    "def main():\n",
    "    choices = [\"build\",\"ff\",\"onepager\",\"all\",\"app\"]\n",
    "    p = argparse.ArgumentParser(description=\"All-in-one Multi-Factor (Momentum + Low-Vol) pipeline\")\n",
    "    p.add_argument(\"-m\",\"--mode\", choices=choices, help=\"what to run\")\n",
    "    p.add_argument(\"mode_pos\", nargs=\"?\", choices=choices, help=\"same as --mode (positional)\")\n",
    "    args = p.parse_args()\n",
    "    mode = args.mode or args.mode_pos or \"all\"\n",
    "\n",
    "    if mode in (\"build\",\"all\"):\n",
    "        build_artifacts()\n",
    "    if mode in (\"ff\",\"all\"):\n",
    "        run_ff_regression()\n",
    "    if mode in (\"onepager\",\"all\"):\n",
    "        make_one_pager()\n",
    "    if mode == \"app\":\n",
    "        run_app()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fbf0fae2-ddac-414d-b8b6-58bc3fa0d39e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Artifacts saved to ./artifacts\n",
      "/Users/nikhilkundpaur/multifactor_pipeline.py:143: FutureWarning: The argument 'date_parser' is deprecated and will be removed in a future version. Please use 'date_format' instead, or read your data in as 'object' dtype and then call 'to_datetime'.\n",
      "  ff5 = web.DataReader(\"F-F_Research_Data_5_Factors_2x3\", \"famafrench\")[0]\n",
      "/Users/nikhilkundpaur/multifactor_pipeline.py:143: FutureWarning: The argument 'date_parser' is deprecated and will be removed in a future version. Please use 'date_format' instead, or read your data in as 'object' dtype and then call 'to_datetime'.\n",
      "  ff5 = web.DataReader(\"F-F_Research_Data_5_Factors_2x3\", \"famafrench\")[0]\n",
      "/Users/nikhilkundpaur/multifactor_pipeline.py:144: FutureWarning: The argument 'date_parser' is deprecated and will be removed in a future version. Please use 'date_format' instead, or read your data in as 'object' dtype and then call 'to_datetime'.\n",
      "  mom = web.DataReader(\"F-F_Momentum_Factor\", \"famafrench\")[0]\n",
      "/Users/nikhilkundpaur/multifactor_pipeline.py:144: FutureWarning: The argument 'date_parser' is deprecated and will be removed in a future version. Please use 'date_format' instead, or read your data in as 'object' dtype and then call 'to_datetime'.\n",
      "  mom = web.DataReader(\"F-F_Momentum_Factor\", \"famafrench\")[0]\n",
      "✅ Regression saved. Alpha (annual): 10.20% | R²: 0.791\n",
      "✅ Artifacts saved to ./artifacts\n",
      "/Users/nikhilkundpaur/multifactor_pipeline.py:143: FutureWarning: The argument 'date_parser' is deprecated and will be removed in a future version. Please use 'date_format' instead, or read your data in as 'object' dtype and then call 'to_datetime'.\n",
      "  ff5 = web.DataReader(\"F-F_Research_Data_5_Factors_2x3\", \"famafrench\")[0]\n",
      "/Users/nikhilkundpaur/multifactor_pipeline.py:143: FutureWarning: The argument 'date_parser' is deprecated and will be removed in a future version. Please use 'date_format' instead, or read your data in as 'object' dtype and then call 'to_datetime'.\n",
      "  ff5 = web.DataReader(\"F-F_Research_Data_5_Factors_2x3\", \"famafrench\")[0]\n",
      "/Users/nikhilkundpaur/multifactor_pipeline.py:144: FutureWarning: The argument 'date_parser' is deprecated and will be removed in a future version. Please use 'date_format' instead, or read your data in as 'object' dtype and then call 'to_datetime'.\n",
      "  mom = web.DataReader(\"F-F_Momentum_Factor\", \"famafrench\")[0]\n",
      "/Users/nikhilkundpaur/multifactor_pipeline.py:144: FutureWarning: The argument 'date_parser' is deprecated and will be removed in a future version. Please use 'date_format' instead, or read your data in as 'object' dtype and then call 'to_datetime'.\n",
      "  mom = web.DataReader(\"F-F_Momentum_Factor\", \"famafrench\")[0]\n",
      "✅ Regression saved. Alpha (annual): 10.20% | R²: 0.791\n",
      "✅ One-pager saved: artifacts/one_pager_report.pdf\n",
      "\u001b[0m\n",
      "\u001b[34m\u001b[1m  You can now view your Streamlit app in your browser.\u001b[0m\n",
      "\u001b[0m\n",
      "\u001b[34m  Local URL: \u001b[0m\u001b[1mhttp://localhost:8501\u001b[0m\n",
      "\u001b[34m  Network URL: \u001b[0m\u001b[1mhttp://192.168.0.2:8501\u001b[0m\n",
      "\u001b[0m\n",
      "2025-08-25 20:59:09.212 MediaFileHandler: Missing file 879614cf6781c7030c2b4b38d08a54df1cb46239d12ad238b634e143.png\n"
     ]
    }
   ],
   "source": [
    "!python multifactor_pipeline.py build\n",
    "!python multifactor_pipeline.py --mode ff\n",
    "!python multifactor_pipeline.py all\n",
    "!streamlit run multifactor_pipeline.py -- --mode app"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34ba5c11-7270-448a-a857-96ac8d15a1fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "yfinance>=0.2.65\n",
    "pandas>=2.2.0\n",
    "numpy>=1.26.0\n",
    "matplotlib>=3.8.0\n",
    "pandas-datareader>=0.10.0\n",
    "statsmodels>=0.14.0\n",
    "streamlit>=1.36.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28095302-c0c6-44ad-9dde-7f937167163f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Multi-Factor Equity Strategy Dashboard\n",
    "\n",
    "Interactive dashboard for a quantitative investment strategy combining momentum and low-volatility factors.\n",
    "\n",
    "## Performance Highlights\n",
    "- 26.7% annualized return vs 13.3% market (SPY)\n",
    "- Sharpe Ratio: 1.33 vs 0.67 market\n",
    "- 10.2% annual alpha generation\n",
    "\n",
    "## Technologies Used\n",
    "- Python, pandas, yfinance\n",
    "- Streamlit for web interface\n",
    "- Statistical analysis with statsmodels\n",
    "\n",
    "Educational purpose only. Not investment advice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae107e41-17b0-4703-9ef3-d950b9ff7250",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Auto-launch in app mode for Streamlit Cloud\n",
    "import sys\n",
    "if \"streamlit\" in sys.modules or len(sys.argv) == 1:\n",
    "    sys.argv = [\"multifactor_pipeline.py\", \"--mode\", \"app\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "495b37bd-bac8-4382-91ce-ccfd5adf27c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize Git (if not already done)\n",
    "git init\n",
    "\n",
    "# Add all files\n",
    "git add .\n",
    "\n",
    "# Commit\n",
    "git commit -m \"Multi-factor equity strategy dashboard\"\n",
    "\n",
    "# Create GitHub repo (replace YOUR-USERNAME)\n",
    "# Go to github.com, click \"New repository\"\n",
    "# Name: multifactor-strategy\n",
    "# Make it PUBLIC\n",
    "# Don't initialize with README (you already have one)\n",
    "\n",
    "# Link and push\n",
    "git remote add origin https://github.com/YOUR-USERNAME/multifactor-strategy.git\n",
    "git branch -M main\n",
    "git push -u origin main"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0829db7-1399-4fb3-a15c-4b6b5f7f9081",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
